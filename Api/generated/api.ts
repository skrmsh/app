/* tslint:disable */
/* eslint-disable */
/**
 * A swagger API
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface AuthPostRequest
 */
export interface AuthPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'created_at'?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'created_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'gid'?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'player_count'?: number;
    /**
     * 
     * @type {Array<GamePlayersInner>}
     * @memberof Game
     */
    'players'?: Array<GamePlayersInner>;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'start_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'team_count'?: number;
    /**
     * 
     * @type {Array<GameTeamsInner>}
     * @memberof Game
     */
    'teams'?: Array<GameTeamsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface GameGidPostRequest
 */
export interface GameGidPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GameGidPostRequest
     */
    'gamemode': string;
}
/**
 * 
 * @export
 * @interface GameGidPutRequest
 */
export interface GameGidPutRequest {
    /**
     * 
     * @type {number}
     * @memberof GameGidPutRequest
     */
    'delay': number;
}
/**
 * 
 * @export
 * @interface GamePlayersInner
 */
export interface GamePlayersInner {
    /**
     * 
     * @type {number}
     * @memberof GamePlayersInner
     */
    'health'?: number;
    /**
     * 
     * @type {string}
     * @memberof GamePlayersInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GamePlayersInner
     */
    'pid'?: number;
    /**
     * 
     * @type {number}
     * @memberof GamePlayersInner
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof GamePlayersInner
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface GameTeamsInner
 */
export interface GameTeamsInner {
    /**
     * 
     * @type {string}
     * @memberof GameTeamsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameTeamsInner
     */
    'player_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameTeamsInner
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameTeamsInner
     */
    'rank'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameTeamsInner
     */
    'tid'?: number;
}
/**
 * 
 * @export
 * @interface GamemodeList
 */
export interface GamemodeList {
    /**
     * 
     * @type {Array<string>}
     * @memberof GamemodeList
     */
    'gamemodes': Array<string>;
}
/**
 * 
 * @export
 * @interface GamesList
 */
export interface GamesList {
    /**
     * 
     * @type {Array<GamesListGamesInner>}
     * @memberof GamesList
     */
    'games'?: Array<GamesListGamesInner>;
}
/**
 * 
 * @export
 * @interface GamesListGamesInner
 */
export interface GamesListGamesInner {
    /**
     * 
     * @type {number}
     * @memberof GamesListGamesInner
     */
    'created_at'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GamesListGamesInner
     */
    'created_by'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GamesListGamesInner
     */
    'gid'?: string;
    /**
     * 
     * @type {number}
     * @memberof GamesListGamesInner
     */
    'player_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GamesListGamesInner
     */
    'start_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof GamesListGamesInner
     */
    'team_count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GamesListGamesInner
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface Gid
 */
export interface Gid {
    /**
     * 
     * @type {string}
     * @memberof Gid
     */
    'gid'?: string;
}
/**
 * 
 * @export
 * @interface PlayerMoved
 */
export interface PlayerMoved {
    /**
     * 
     * @type {string}
     * @memberof PlayerMoved
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationInfo
 */
export interface RegistrationInfo {
    /**
     * 
     * @type {string}
     * @memberof RegistrationInfo
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationInfo
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'game'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'player_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'points'?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'rank'?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'tid'?: number;
}
/**
 * 
 * @export
 * @interface TeamGidTidPostRequest
 */
export interface TeamGidTidPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamGidTidPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TeamGidTidPutRequest
 */
export interface TeamGidTidPutRequest {
    /**
     * 
     * @type {number}
     * @memberof TeamGidTidPutRequest
     */
    'pid': number;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface UserPostRequest
 */
export interface UserPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserPostRequest
     */
    'password': string;
}

/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gid Game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidDelete: async (gid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('gameGidDelete', 'gid', gid)
            const localVarPath = `/game/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidGet: async (gid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('gameGidGet', 'gid', gid)
            const localVarPath = `/game/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid Ignored parameter
         * @param {GameGidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidPost: async (gid: string, body: GameGidPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('gameGidPost', 'gid', gid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gameGidPost', 'body', body)
            const localVarPath = `/game/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid Game to start
         * @param {GameGidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidPut: async (gid: string, body: GameGidPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('gameGidPut', 'gid', gid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gameGidPut', 'body', body)
            const localVarPath = `/game/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamemodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gamemode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gid Game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGidDelete(gid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGidDelete(gid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGidGet(gid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGidGet(gid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid Ignored parameter
         * @param {GameGidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGidPost(gid: string, body: GameGidPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGidPost(gid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid Game to start
         * @param {GameGidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameGidPut(gid: string, body: GameGidPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameGidPut(gid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamemodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamemodeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamemodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gid Game to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidDelete(gid: string, options?: any): AxiosPromise<void> {
            return localVarFp.gameGidDelete(gid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidGet(gid: string, options?: any): AxiosPromise<Game> {
            return localVarFp.gameGidGet(gid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid Ignored parameter
         * @param {GameGidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidPost(gid: string, body: GameGidPostRequest, options?: any): AxiosPromise<Gid> {
            return localVarFp.gameGidPost(gid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid Game to start
         * @param {GameGidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameGidPut(gid: string, body: GameGidPutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.gameGidPut(gid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamemodeGet(options?: any): AxiosPromise<GamemodeList> {
            return localVarFp.gamemodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet(options?: any): AxiosPromise<GamesList> {
            return localVarFp.gamesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * 
     * @param {string} gid Game to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGidDelete(gid: string, options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGidDelete(gid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid The ID of the game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGidGet(gid: string, options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGidGet(gid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid Ignored parameter
     * @param {GameGidPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGidPost(gid: string, body: GameGidPostRequest, options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGidPost(gid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid Game to start
     * @param {GameGidPutRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gameGidPut(gid: string, body: GameGidPutRequest, options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gameGidPut(gid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gamemodeGet(options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gamemodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public gamesGet(options?: AxiosRequestConfig) {
        return GameApiFp(this.configuration).gamesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidDelete: async (gid: string, tid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('teamGidTidDelete', 'gid', gid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('teamGidTidDelete', 'tid', tid)
            const localVarPath = `/team/{gid}/{tid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"tid"}}`, encodeURIComponent(String(tid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidGet: async (gid: string, tid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('teamGidTidGet', 'gid', gid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('teamGidTidGet', 'tid', tid)
            const localVarPath = `/team/{gid}/{tid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"tid"}}`, encodeURIComponent(String(tid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidPost: async (gid: string, tid: number, body: TeamGidTidPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('teamGidTidPost', 'gid', gid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('teamGidTidPost', 'tid', tid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('teamGidTidPost', 'body', body)
            const localVarPath = `/team/{gid}/{tid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"tid"}}`, encodeURIComponent(String(tid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidPut: async (gid: string, tid: number, body: TeamGidTidPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            assertParamExists('teamGidTidPut', 'gid', gid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('teamGidTidPut', 'tid', tid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('teamGidTidPut', 'body', body)
            const localVarPath = `/team/{gid}/{tid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"tid"}}`, encodeURIComponent(String(tid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamGidTidDelete(gid: string, tid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamGidTidDelete(gid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamGidTidGet(gid: string, tid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamGidTidGet(gid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamGidTidPost(gid: string, tid: number, body: TeamGidTidPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamGidTidPost(gid, tid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamGidTidPut(gid: string, tid: number, body: TeamGidTidPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerMoved>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamGidTidPut(gid, tid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidDelete(gid: string, tid: number, options?: any): AxiosPromise<void> {
            return localVarFp.teamGidTidDelete(gid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidGet(gid: string, tid: number, options?: any): AxiosPromise<Team> {
            return localVarFp.teamGidTidGet(gid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidPost(gid: string, tid: number, body: TeamGidTidPostRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.teamGidTidPost(gid, tid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} gid The ID of the game.
         * @param {number} tid The ID of the team.
         * @param {TeamGidTidPutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamGidTidPut(gid: string, tid: number, body: TeamGidTidPutRequest, options?: any): AxiosPromise<PlayerMoved> {
            return localVarFp.teamGidTidPut(gid, tid, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @param {string} gid The ID of the game.
     * @param {number} tid The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamGidTidDelete(gid: string, tid: number, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamGidTidDelete(gid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid The ID of the game.
     * @param {number} tid The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamGidTidGet(gid: string, tid: number, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamGidTidGet(gid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid The ID of the game.
     * @param {number} tid The ID of the team.
     * @param {TeamGidTidPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamGidTidPost(gid: string, tid: number, body: TeamGidTidPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamGidTidPost(gid, tid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} gid The ID of the game.
     * @param {number} tid The ID of the team.
     * @param {TeamGidTidPutRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public teamGidTidPut(gid: string, tid: number, body: TeamGidTidPutRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).teamGidTidPut(gid, tid, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost: async (body: AuthPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authPost', 'body', body)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-access-token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserPostRequest} userInfo information for the new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost: async (userInfo: UserPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userInfo' is not null or undefined
            assertParamExists('userPost', 'userInfo', userInfo)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPost(body: AuthPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserPostRequest} userInfo information for the new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPost(userInfo: UserPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPost(userInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost(body: AuthPostRequest, options?: any): AxiosPromise<AuthInfo> {
            return localVarFp.authPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete(options?: any): AxiosPromise<void> {
            return localVarFp.userDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): AxiosPromise<UserInfo> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserPostRequest} userInfo information for the new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(userInfo: UserPostRequest, options?: any): AxiosPromise<RegistrationInfo> {
            return localVarFp.userPost(userInfo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {AuthPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public authPost(body: AuthPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).authPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userDelete(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserPostRequest} userInfo information for the new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPost(userInfo: UserPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userPost(userInfo, options).then((request) => request(this.axios, this.basePath));
    }
}



